"""Test implementation of Maxwell's mutual_fil by elliptic integrals."""

import math
import unittest

import numpy as np

from inductance.filaments import mutual_fil

MU0 = 4e-7 * math.pi

# this is copied from Grover's book
# (or Rosa and Grover's book)
# I have no idea what the 3rd column Delta_1 means.

TABLE_1_PAGE192 = [
    ["60°  0", 1.4994780, 2.7868],
    ["     6", 1.5022648, 2.7854],
    ["    12", 1.5050502, 2.7840],
    ["    18", 1.5078342, 2.7828],
    ["    24", 1.5106170, 2.7816],
    ["    30", 1.5133986, 2.7803],
    ["    36", 1.5161789, 2.7790],
    ["    42", 1.5189579, 2.7778],
    ["    48", 1.5217357, 2.7765],
    ["    54", 1.5245122, 2.7753],
    ["61°  0", 1.5272875, 2.7743],
    ["     6", 1.5300618, 2.7734],
    ["    12", 1.5328352, 2.7725],
    ["    18", 1.5356077, 2.7715],
    ["    24", 1.5383792, 2.7705],
    ["    30", 1.5411497, 2.7694],
    ["    36", 1.5439191, 2.7683],
    ["    42", 1.5466874, 2.7672],
    ["    48", 1.5494546, 2.7663],
    ["    54", 1.5522209, 2.7654],
    ["62°  0", 1.5549863, 2.7645],
    ["     6", 1.5577508, 2.7637],
    ["    12", 1.5605145, 2.7629],
    ["    18", 1.5632774, 2.7622],
    ["    24", 1.5660396, 2.7615],
    ["    30", 1.5688011, 2.7607],
    ["    36", 1.5715618, 2.7598],
    ["    42", 1.5743216, 2.7589],
    ["    48", 1.5770805, 2.7582],
    ["    54", 1.5798387, 2.7575],
    ["63°  0", 1.5825962, 2.7570],
    ["     6", 1.5853532, 2.7567],
    ["    12", 1.5881099, 2.7563],
    ["    18", 1.5908662, 2.7559],
    ["    24", 1.5936221, 2.7555],
    ["    30", 1.5963776, 2.7549],
    ["    36", 1.5991325, 2.7543],
    ["    42", 1.6018868, 2.7537],
    ["    48", 1.6046405, 2.7533],
    ["    54", 1.6073938, 2.7530],
    ["64°  0", 1.6101468, 2.7527],
    ["     6", 1.6128995, 2.7524],
    ["    12", 1.6156519, 2.7521],
    ["    18", 1.6184040, 2.7519],
    ["    24", 1.6211559, 2.7516],
    ["    30", 1.6239075, 2.7514],
    ["    36", 1.6266589, 2.7513],
    ["    42", 1.6294102, 2.7512],
    ["    48", 1.6321614, 2.7510],
    ["    54", 1.6349124, 2.7509],
    ["65°  0", 1.6376633, 2.7508],
    ["     6", 1.6404141, 2.7508],
    ["    12", 1.6431649, 2.7507],
    ["    18", 1.6459156, 2.7507],
    ["    24", 1.6486663, 2.7507],
    ["    30", 1.6514170, 2.7509],
    ["    36", 1.6541679, 2.7510],
    ["    42", 1.6569189, 2.7512],
    ["    48", 1.6596701, 2.7514],
    ["    54", 1.6624215, 2.7516],
    ["66°  0", 1.6651731, 2.7519],
    ["     6", 1.6679250, 2.7522],
    ["    12", 1.6706772, 2.7524],
    ["    18", 1.6734296, 2.7528],
    ["    24", 1.6761824, 2.7532],
    ["    30", 1.6789356, 2.7535],
    ["    36", 1.6816891, 2.7539],
    ["    42", 1.6844430, 2.7543],
    ["    48", 1.6871973, 2.7548],
    ["    54", 1.6899521, 2.7553],
    ["67°  0", 1.6927074, 2.7561],
    ["     6", 1.6954635, 2.7567],
    ["    12", 1.6982202, 2.7573],
    ["    18", 1.7009775, 2.7580],
    ["    24", 1.7037355, 2.7587],
    ["    30", 1.7064942, 2.7595],
    ["    36", 1.7092537, 2.7603],
    ["    42", 1.7120140, 2.7610],
    ["    48", 1.7147750, 2.7619],
    ["    54", 1.7175369, 2.7628],
    ["68°  0", 1.7202997, 2.7637],
    ["     6", 1.7230634, 2.7647],
    ["    12", 1.7258281, 2.7656],
    ["    18", 1.7285937, 2.7667],
    ["    24", 1.7313604, 2.7679],
    ["    30", 1.7341283, 2.7689],
    ["    36", 1.7368972, 2.7701],
    ["    42", 1.7396673, 2.7713],
    ["    48", 1.7424386, 2.7725],
    ["    54", 1.7452111, 2.7737],
    ["69°  0", 1.7479848, 2.7749],
    ["     6", 1.7507597, 2.7763],
    ["    12", 1.7535360, 2.7778],
    ["    18", 1.7563138, 2.7791],
    ["    24", 1.7590929, 2.7806],
    ["    30", 1.7618735, 2.7821],
    ["    36", 1.7646556, 2.7836],
    ["    42", 1.7674392, 2.7853],
    ["    48", 1.7702245, 2.7871],
    ["    54", 1.7730116, 2.7888],
    ["70°  0", 1.7758004, 2.7904],
]
# skip one page.. not needed

# Table in this old book is weird. When the value gets to 2, it jumps to 0.
# Since this is log10, it just means you need to multiply the answer by 100.
# In thise case, we'll just add 2 to everything less than 1.3

TABLE_1_PAGE194 = [
    ["80°  0", 0.0741812, 3.3500],
    ["     6", 0.0775312, 3.3628],
    ["    12", 0.0808940, 3.3760],
    ["    18", 0.0842700, 3.3892],
    ["    24", 0.0876592, 3.4027],
    ["    30", 0.0910619, 3.4165],
    ["    36", 0.0944784, 3.4307],
    ["    42", 0.0979091, 3.4452],
    ["    48", 0.1013543, 3.4601],
    ["    54", 0.1048144, 3.4752],
    ["81°  0", 0.1082896, 3.4906],
    ["     6", 0.1117802, 3.5064],
    ["    12", 0.1152866, 3.5226],
    ["    18", 0.1188092, 3.5392],
    ["    24", 0.1223484, 3.5561],
    ["    30", 0.1259045, 3.5735],
    ["    36", 0.1294780, 3.5912],
    ["    42", 0.1330692, 3.6094],
    ["    48", 0.1366786, 3.6280],
    ["    54", 0.1403066, 3.6470],
    ["82°  0", 0.1439536, 3.6667],
    ["     6", 0.1476203, 3.6869],
    ["    12", 0.1513072, 3.7076],
    ["    18", 0.1550148, 3.7287],
    ["    24", 0.1587435, 3.7503],
    ["    30", 0.1624938, 3.7722],
    ["    36", 0.1662660, 3.7949],
    ["    42", 0.1700609, 3.8183],
    ["    48", 0.1738792, 3.8425],
    ["    54", 0.1777217, 3.8673],
    ["83°  0", 0.1815890, 3.8926],
    ["     6", 0.1854816, 3.9185],
    ["    12", 0.1894001, 3.9452],
    ["    18", 0.1933453, 3.9728],
    ["    24", 0.1973181, 4.0013],
    ["    30", 0.2013194, 4.0308],
    ["    36", 0.2053502, 4.0606],
    ["    42", 0.2094108, 4.0915],
    ["    48", 0.2135023, 4.1236],
    ["    54", 0.2176259, 4.1565],
    ["84°  0", 0.2217824, 4.1904],
    ["     6", 0.2259728, 4.2255],
    ["    12", 0.2301983, 4.2617],
    ["    18", 0.2344600, 4.2991],
    ["    24", 0.2387591, 4.3379],
    ["    30", 0.2430970, 4.3778],
    ["    36", 0.2474748, 4.4192],
    ["    42", 0.2518940, 4.4621],
    ["    48", 0.2563561, 4.5065],
    ["    54", 0.2608626, 4.5526],
    ["85°  0", 0.2654154, 4.6004],
    ["     6", 0.2700156, 4.6499],
    ["    12", 0.2746655, 4.7015],
    ["    18", 0.2793670, 4.7553],
    ["    24", 0.2841223, 4.8109],
    ["    30", 0.2889332, 4.8689],
    ["    36", 0.2938021, 4.9293],
    ["    42", 0.2987314, 4.9924],
    ["    48", 0.3037238, 5.0585],
    ["    54", 0.3087823, 5.1274],
    ["86°  0", 0.3139097, 5.1995],
    ["     6", 0.3191092, 5.2751],
    ["    12", 0.3243843, 5.3544],
    ["    18", 0.3297387, 5.4375],
    ["    24", 0.3351762, 5.5250],
    ["    30", 0.3407012, 5.6172],
    ["    36", 0.3463184, 5.7143],
    ["    42", 0.3520327, 5.8168],
    ["    48", 0.3578495, 5.9254],
    ["    54", 0.3637749, 6.0404],
    ["87°  0", 0.3698154, 6.1624],
    ["     6", 0.3759777, 6.2923],
    ["    12", 0.3822700, 6.4306],
    ["    18", 0.3887006, 6.5786],
    ["    24", 0.3952792, 6.7370],
    ["    30", 0.4020162, 6.9072],
    ["    36", 0.4089234, 7.0904],
    ["    42", 0.4160138, 7.2884],
    ["    48", 0.4233022, 7.5031],
    ["    54", 0.4308053, 7.7373],
    ["88°  0", 0.4385417, 7.9921],
    ["     6", 0.4465341, 8.2723],
    ["    12", 0.4548064, 8.5816],
    ["    18", 0.4633880, 8.9247],
    ["    24", 0.4723127, 9.3079],
    ["    30", 0.4816206, 9.7389],
    ["    36", 0.4913595, 10.2275],
    ["    42", 0.5015870, 10.7868],
    ["    48", 0.5123738, 11.4341],
    ["    54", 0.5238079, 12.1932],
    ["89°  0", 0.5360011, 13.0958],
    ["     6", 0.5490969, 14.1917],
    ["    12", 0.5632886, 15.5520],
    ["    18", 0.5788406, 17.2914],
    ["    24", 0.5961320, 19.6050],
    ["    30", 0.6157370, 22.8537],
    ["    36", 0.6385907, 27.7976],
    ["    42", 0.6663883, 36.3882],
    ["    48", 0.7027765, 55.9176],
    ["    54", 0.7586941, 100],
]


def _read_table(table):
    degree = 0
    for row in table:
        x, mnorm, delta = row
        if "°" in x:
            degree, minute = x.split("°")
            degree = int(degree)
            minute = int(minute)
        else:
            minute = int(x)
        if mnorm < 1.3:  # weirdness in table, it shows 2.xx as 0.xx
            mnorm += 2.0
        gamma = (float(degree) + float(minute) / 60) * math.pi / 180
        kappa = math.sin(gamma)
        yield kappa, mnorm, delta


def _comp_mnorm(kappa: float) -> float:
    def A(kappa, a, d):
        A = (
            a * (2 - kappa**2)
            + math.sqrt(4 * a**2 * (1 - kappa**2) - d**2 * kappa**4)
        ) / kappa**2
        return A

    rzn1 = np.array([1, 0, 1], dtype=float)
    rzn2 = np.array([A(kappa, rzn1[0], 0), 0, 1], dtype=float)
    M = mutual_fil(rzn1, rzn2)

    return 2 + math.log10(M / math.sqrt(rzn1[0] * rzn2[0]) / MU0)


# check that the formula is correct where it breaks.
# found problem of k vs k^2
def _plot_maxwell_mutual():
    import matplotlib.pylab as plt
    import numpy as np

    from inductance.filaments import mutual_fil

    Z = np.exp(np.linspace(0, -12, 1000))  # test to very small distances
    rzn2 = np.array([1, 0, 1], dtype=float)
    m = [mutual_fil(np.array([1, z, 1]), rzn2) * 1e6 for z in Z]
    plt.plot(Z, m, ",")
    plt.xscale("log")
    plt.show()


class TestFormulaOne(unittest.TestCase):
    """Test class for mutual_fil() function."""

    def test_formula_one_tables(self):
        """Test formula one against tables in the Rosa and Grover's book."""
        for kappa, mnorm, _ in _read_table(TABLE_1_PAGE192):
            comp_log_m = _comp_mnorm(kappa)
            self.assertAlmostEqual(
                comp_log_m,
                mnorm,
                places=5,
                msg=f"kappa={kappa}, gamma={math.asin(kappa)*180/math.pi}",
            )
        for kappa, mnorm, _ in _read_table(TABLE_1_PAGE194):
            comp_log_m = _comp_mnorm(kappa)
            self.assertAlmostEqual(
                comp_log_m,
                mnorm,
                places=5,
                msg=f"kappa={kappa}, gamma={math.asin(kappa)*180/math.pi}",
            )


if __name__ == "__main__":
    unittest.main()
    _plot_maxwell_mutual()
